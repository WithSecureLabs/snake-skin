import { send, parseResponse, formatResponse } from "api/common";
import { BASE_URL } from "config";


const base = `${BASE_URL}/api?_path=`;


export function getCommand(sha256_digest, scale, command, {fetch, args, format} = {}) {
  let url = `${base}/command`;
  const _args = [
    `sha256_digest=${sha256_digest}`,
    `scale=${scale}`,
    `command=${command}`
  ];
  if (typeof args !== 'undefined') {
    _args.push(`args=${args}`);
  }
  if (typeof format !== "undefined") {
    _args.push(`format=${format}`);
  }
  url = `${url}&${_args.join('&')}`;
  return send({
    method: 'GET',
    fetch,
    url,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function postCommand(sha256_digest, scale, command, {fetch, args, format, timeout} = {}) {
  let url = `${base}/command`;
  const data = {
    sha256_digest,
    scale,
    command,
    asynchronous: 'true'
  };
  if (typeof args !== 'undefined') {
    data.args = args;
  }
  if (typeof format !== "undefined") {
    data.format = format;
  }
  if (typeof timeout !== "undefined") {
    data.timeout = timeout;
  }
  return send({
    method: 'POST',
    fetch,
    url,
    data,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function postCommands(data, {fetch} = {}) {
  let url = `${base}/commands`;
  return send({
    method: 'POST',
    fetch,
    url,
    data,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getCommands({fetch, output, sha256_digest} = {}) {
  let url = `${base}/commands`;
  const args = [];
  if (typeof output !== 'undefined') {
    args.push(`output=${output}`);
  }
  if (typeof sha256_digest !== "undefined") {
    args.push(`sha256_digest=${sha256_digest}`);
  }
  if (args.length > 0) {
    url = `${url}&${args.join('&')}`;
  }
  return send({
    method: 'GET',
    fetch,
    url,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getHexdump(sha256_digest, {fetch} = {}) {
  let url = `${base}/file/${sha256_digest}/hex`;
  return send({
    method: 'GET',
    fetch,
    url,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getNote(sha256_digest, {fetch} = {}) {
  let url = `${base}/note/${sha256_digest}`;
  return send({
    method: 'GET',
    fetch,
    url,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function patchNote(sha256_digest, data, {fetch} = {}) {
  let url = `${base}/note/${sha256_digest}`;
  return send({
    method: 'PATCH',
    fetch,
    url,
    data,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function postNote(sha256_digest, data, {fetch} = {}) {
  let url = `${base}/note`;
  const d = { sha256_digest, ...data};
  return send({
    method: 'POST',
    fetch,
    url,
    data: d,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getSample(sha256_digest, {fetch} = {}) {
  let url = `${base}/store/${sha256_digest}`;
  return send({
    method: 'GET',
    fetch,
    url,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function patchSample(file_type, sha256_digest, data, {fetch} = {}) {
  let url = `${base}/${file_type}/${sha256_digest}`;
  return send({
    method: 'PATCH',
    fetch,
    url,
    data,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getSamples({fetch, filter, limit, order, sort} = {}) {
  let url = `${base}/store`;
  const args = [];
  if (typeof filter !== "undefined") {
    args.push(`filter=${filter}`);
  }
  if (typeof limit !== "undefined") {
    args.push(`limit=${limit}`);
  }
  if (typeof order !== "undefined") {
    args.push(`order=${order}`);
  }
  if (typeof sort !== "undefined") {
    args.push(`sort=${sort}`);
  }
  if (args.length > 0) {
    url = `${url}&${args.join('&')}`;
  }
  return send({
    method: 'GET',
    fetch,
    url,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getScales({file_type} = {}) {
  let url = `${base}/scales`;
  const args = [];
  if (typeof file_type !== "undefined") {
    args.push(`file_type=${file_type}`);
  }
  if (args.length > 0) {
    url = `${url}&${args.join('&')}`;
  }
  return send({
    method: 'GET',
    url,
  })
  .then(parseResponse)
  .then(formatResponse)
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getScaleCommands(scale) {
  let url = `${base}/scale/${scale}/commands`;
  return send({
    method: 'GET',
    url,
  })
  .then(parseResponse)
  .then(formatResponse) // TODO: Use custom?
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getScaleInterface(scale) {
  let url = `${base}/scale/${scale}/interface`;
  return send({
    method: 'GET',
    url,
  })
  .then(parseResponse)
  .then(formatResponse) // TODO: Use custom?
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function postScaleInterface(scale, type, command, sha256_digest, { args, format, timeout } = {}) {
  const data = {
    format: 'json',
    sha256_digest,
    command,
    type,
  };
  if (typeof args !== "undefined") {
    data.args = args;
  }
  if (typeof format !== "undefined") {
    data.format = format;
  }
  if (typeof timeout !== "undefined") {
    data.timeout = timeout;
  }
  let url = `${base}/scale/${scale}/interface`;
  return send({
    method: 'POST',
    url,
    data,
  })
  .then(parseResponse)
  .then(formatResponse) // TODO: Use custom?
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}

export function getScaleUpload(scale) {
  let url = `${base}/scale/${scale}/upload`;
  return send({
    method: 'GET',
    fetch,
    url,
  })
  .then(parseResponse)
  .then(formatResponse) // TODO: Use custom?
  .catch(e => {
    return {
      status: "error",
      message: e,
    };
  });
}
